#loading the dataset 

fitness<-read.csv("C:/Users/heman/OneDrive/Documents/CSDA 5430 S1 2024 Predictive Analytics/Fitness.csv")

#
str(fitness)

#summary:
summary(fitness)

#gender
library(ggplot2)

# Assuming fitness is your dataset
ggplot(fitness, aes(x = Gender)) +
  geom_bar(fill = "steelblue", color = "black") +
  labs(title = "Gender Distribution of Fitness Center Members", x = "Gender", y = "Count") +
  theme_minimal()

table(fitness$Gender)


#workout
# Checking unique workout types and their counts
table(fitness$Workout_Type)

# Bar plot for Workout Type distribution
barplot(table(fitness$Workout_Type), main = "Workout Type Distribution", col = "skyblue", xlab = "Workout Type", ylab = "Count")


###fitnesss experience
table(fitness$Experience_Level)
# Bar plot to visualize the distribution of Experience Levels
barplot(table(fitness$Experience_Level), 
        main = "Distribution of Experience Levels", 
        xlab = "Experience Level", 
        ylab = "Frequency", 
        col = "lightseagreen", 
        border = "black")



########################
# Set up plotting area (4 rows, 3 columns for 12 variables)
par(mfrow = c(4, 3))

# Plot histograms for all continuous variables
hist(fitness$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
hist(fitness$Weight..kg., main = "Weight Distribution", xlab = "Weight (kg)", col = "lightgreen", border = "black")
hist(fitness$Height..m., main = "Height Distribution", xlab = "Height (m)", col = "lightcoral", border = "black")
hist(fitness$Max_BPM, main = "Max BPM Distribution", xlab = "Max BPM", col = "lightblue", border = "black")
hist(fitness$Avg_BPM, main = "Avg BPM Distribution", xlab = "Avg BPM", col = "lightgreen", border = "black")
hist(fitness$Resting_BPM, main = "Resting BPM Distribution", xlab = "Resting BPM", col = "lightcoral", border = "black")
hist(fitness$Session_Duration..hours., main = "Session Duration", xlab = "Hours", col = "lightblue", border = "black")
hist(fitness$Calories_Burned, main = "Calories Burned", xlab = "Calories", col = "lightgreen", border = "black")
hist(fitness$Fat_Percentage, main = "Fat Percentage", xlab = "Fat %", col = "lightcoral", border = "black")
hist(fitness$Water_Intake..liters., main = "Water Intake", xlab = "Liters", col = "lightblue", border = "black")
hist(fitness$Workout_Frequency..days.week., main = "Workout Frequency", xlab = "Days per Week", col = "lightgreen", border = "black")
hist(fitness$BMI, main = "BMI Distribution", xlab = "BMI", col = "lightcoral", border = "black")

# Reset plot layout
par(mfrow = c(1, 1))



######################################################################
# BMI Categories based on BMI values
fitness$BMI_CAT <- cut(fitness$BMI,
                       breaks = c(0, 18.5, 24.9, 29.9, Inf),
                       labels = c("Underweight", "Normal", "Overweight", "Obese"),
                       right = FALSE)

# Weight to Height Ratio
fitness$weight_to_height_ratio <- fitness$Weight..kg. / fitness$Height..m.

# Heart Rate Range (Max BPM - Resting BPM)
fitness$heart_rate_range <- fitness$Max_BPM - fitness$Resting_BPM

# Heart Rate Reserve (Max BPM - Avg BPM)
fitness$heart_rate_reserve <- fitness$Max_BPM - fitness$Avg_BPM

# Heart Intensity Ratio (Avg BPM / Max BPM)
fitness$heart_intensity_ratio <- fitness$Avg_BPM / fitness$Max_BPM

# Calories per kg (Calories Burned / Weight in kg)
fitness$calories_per_kg <- fitness$Calories_Burned / fitness$Weight..kg.

# Workout Intensity Score
fitness$workout_intensity_score <- (fitness$Avg_BPM / fitness$Resting_BPM) * fitness$Session_Duration..hours. * fitness$Workout_Frequency..days.week.

# Age Group based on Age
fitness$Age_group <- cut(fitness$Age,
                         breaks = c(17, 25, 35, 45, Inf),
                         labels = c("18-25", "26-35", "36-45", "45+"),
                         right = FALSE)

# Hydration Need Ratio (Water Intake / Session Duration)
fitness$hydration_need_ratio <- fitness$Water_Intake..liters. / fitness$Session_Duration..hours.

summary(fitness)

##############
# Load necessary libraries
library(ggplot2)
library(corrplot)

# 1. Distribution of BMI Categories (BMI_CAT)
ggplot(fitness, aes(x = BMI_CAT)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Distribution of BMI Categories", x = "BMI Category", y = "Count") +
  theme_minimal()
table(fitness$BMI_CAT)

# 8. Distribution of Age Groups
ggplot(fitness, aes(x = Age_group)) +
  geom_bar(fill = "lightgreen", color = "black") +
  labs(title = "Distribution of Age Groups", x = "Age Group", y = "Count") +
  theme_minimal()
table(fitness$Age_group)



############################################################################################
# Set up plotting area (3 rows, 3 columns for 9 variables)
par(mfrow = c(3, 3))

# Plot histograms for all continuous variables
hist(fitness$weight_to_height_ratio, main = "Weight-to-Height Ratio", xlab = "Ratio", col = "lightblue", border = "black")
hist(fitness$heart_rate_range, main = "Heart Rate Range", xlab = "BPM", col = "lightgreen", border = "black")
hist(fitness$heart_rate_reserve, main = "Heart Rate Reserve", xlab = "BPM", col = "lightcoral", border = "black")
hist(fitness$heart_intensity_ratio, main = "Heart Intensity Ratio", xlab = "Ratio", col = "lightblue", border = "black")
hist(fitness$calories_per_kg, main = "Calories per kg", xlab = "Calories", col = "lightgreen", border = "black")
hist(fitness$workout_intensity_score, main = "Workout Intensity Score", xlab = "Score", col = "lightcoral", border = "black")
hist(fitness$hydration_need_ratio, main = "Hydration Need Ratio", xlab = "Ratio", col = "lightblue", border = "black")

# Reset plot layout
par(mfrow = c(1, 1))

summary(fitness)




###################################################################################################3
#checking zeros

# Count of zeros in each column
zero_counts <- sapply(fitness, function(x) sum(x == 0, na.rm = TRUE))
print(zero_counts)



#####################################################################################################
str(fitness)

##################################################
library(ggplot2)
library(gridExtra)

# Create each plot and store them in variables
plot1 <- ggplot(fitness, aes(x = Age, y = Calories_Burned)) +
  geom_point(alpha = 0.5, color = "blue") +
  geom_smooth(method = "lm", color = "red", se = TRUE) +
  labs(title = "Age vs. Calories Burned", x = "Age", y = "Calories Burned") +
  theme_minimal()

plot2 <- ggplot(fitness, aes(x = Gender, y = Calories_Burned, fill = Gender)) +
  geom_boxplot(alpha = 0.7) +
  labs(title = "Calories Burned by Gender", x = "Gender", y = "Calories Burned") +
  theme_minimal()

plot3 <- ggplot(fitness, aes(x = Weight..kg., y = Calories_Burned, color = Weight..kg.)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "plasma") +
  labs(title = "Weight vs. Calories Burned", x = "Weight (kg)", y = "Calories Burned") +
  theme_minimal()

plot4 <- ggplot(fitness, aes(x = Workout_Type, y = Calories_Burned, fill = Workout_Type)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(aes(color = Workout_Type), width = 0.2, alpha = 0.5, size = 2) +
  scale_fill_brewer(palette = "Set2") +
  scale_color_brewer(palette = "Set2") +
  labs(title = "Calories Burned by Workout Type", x = "Workout Type", y = "Calories Burned") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

plot5 <- ggplot(fitness, aes(x = Session_Duration..hours., y = Calories_Burned, color = Session_Duration..hours.)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "magma") +
  labs(title = "Session Duration vs. Calories Burned", x = "Session Duration (Hours)", y = "Calories Burned") +
  theme_minimal()

# Arrange plots 1 to 5 in a single plot
grid.arrange(plot1, plot2, plot3, plot4, plot5, ncol = 3)

# Create plots 6 to 10
plot6 <- ggplot(fitness, aes(x = Height..m., y = Calories_Burned, color = Height..m.)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "inferno") +
  labs(title = "Height vs. Calories Burned", x = "Height (m)", y = "Calories Burned") +
  theme_minimal()

plot7 <- ggplot(fitness, aes(x = Max_BPM, y = Calories_Burned, color = Max_BPM)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "viridis") +
  labs(title = "Max BPM vs. Calories Burned", x = "Max BPM", y = "Calories Burned") +
  theme_minimal()

plot8 <- ggplot(fitness, aes(x = Avg_BPM, y = Calories_Burned, color = Avg_BPM)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "cividis") +
  labs(title = "Avg BPM vs. Calories Burned", x = "Average BPM", y = "Calories Burned") +
  theme_minimal()

plot9 <- ggplot(fitness, aes(x = Resting_BPM, y = Calories_Burned, color = Resting_BPM)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "plasma") +
  labs(title = "Resting BPM vs. Calories Burned", x = "Resting BPM", y = "Calories Burned") +
  theme_minimal()

plot10 <- ggplot(fitness, aes(x = Fat_Percentage, y = Calories_Burned, color = Fat_Percentage)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "magma") +
  labs(title = "Fat Percentage vs. Calories Burned", x = "Fat Percentage", y = "Calories Burned") +
  theme_minimal()

# Arrange plots 6 to 10 in a single plot
grid.arrange(plot6, plot7, plot8, plot9, plot10, ncol = 3)


# Create plots 11 to 15
plot11 <- ggplot(fitness, aes(x = Water_Intake..liters., y = Calories_Burned, color = Water_Intake..liters.)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "inferno") +
  labs(title = "Water Intake vs. Calories Burned", x = "Water Intake (liters)", y = "Calories Burned") +
  theme_minimal()

plot12 <- ggplot(fitness, aes(x = Workout_Frequency..days.week., y = Calories_Burned, color = Workout_Frequency..days.week.)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "plasma") +
  labs(title = "Workout Frequency vs. Calories Burned", x = "Workout Frequency (days/week)", y = "Calories Burned") +
  theme_minimal()

plot13 <- ggplot(fitness, aes(x = factor(Experience_Level), y = Calories_Burned, fill = factor(Experience_Level))) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(aes(color = factor(Experience_Level)), width = 0.2, alpha = 0.5, size = 2) +
  scale_fill_brewer(palette = "Set3") +
  scale_color_brewer(palette = "Set3") +
  labs(title = "Calories Burned by Experience Level", x = "Experience Level", y = "Calories Burned") +
  theme_minimal()

plot14 <- ggplot(fitness, aes(x = BMI, y = Calories_Burned, color = BMI)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "magma") +
  labs(title = "BMI vs. Calories Burned", x = "BMI", y = "Calories Burned") +
  theme_minimal()

plot15 <- ggplot(fitness, aes(x = workout_intensity_score, y = Calories_Burned, color = workout_intensity_score)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "inferno") +
  labs(title = "Workout Intensity vs. Calories Burned", x = "Workout Intensity Score", y = "Calories Burned") +
  theme_minimal()

# Arrange plots 11 to 15 in a single plot
grid.arrange(plot11, plot12, plot13, plot14, plot15, ncol = 3)

# Create plots 16 to 20
plot16 <- ggplot(fitness, aes(x = weight_to_height_ratio, y = Calories_Burned, color = weight_to_height_ratio)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "plasma") +
  labs(title = "Weight-to-Height Ratio vs. Calories Burned", x = "Weight-to-Height Ratio", y = "Calories Burned") +
  theme_minimal()

plot17 <- ggplot(fitness, aes(x = heart_rate_range, y = Calories_Burned, color = heart_rate_range)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "cividis") +
  labs(title = "Heart Rate Range vs. Calories Burned", x = "Heart Rate Range", y = "Calories Burned") +
  theme_minimal()

plot18 <- ggplot(fitness, aes(x = heart_rate_reserve, y = Calories_Burned, color = heart_rate_reserve)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "magma") +
  labs(title = "Heart Rate Reserve vs. Calories Burned", x = "Heart Rate Reserve", y = "Calories Burned") +
  theme_minimal()

plot19 <- ggplot(fitness, aes(x = heart_intensity_ratio, y = Calories_Burned, color = heart_intensity_ratio)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "plasma") +
  labs(title = "Heart Intensity Ratio vs. Calories Burned", x = "Heart Intensity Ratio", y = "Calories Burned") +
  theme_minimal()

plot20 <- ggplot(fitness, aes(x = calories_per_kg, y = Calories_Burned, color = calories_per_kg)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "viridis") +
  labs(title = "Calories per kg vs. Calories Burned", x = "Calories per kg", y = "Calories Burned") +
  theme_minimal()

# Arrange plots 16 to 20 in a single plot
grid.arrange(plot16, plot17, plot18, plot19, plot20, ncol = 3)

# Create plots 21 to 24
plot21 <- ggplot(fitness, aes(x = hydration_need_ratio, y = Calories_Burned, color = hydration_need_ratio)) +
  geom_point(alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "black", se = TRUE, linewidth = 1) +
  scale_color_viridis_c(option = "inferno") +
  labs(title = "Hydration Need Ratio vs. Calories Burned", x = "Hydration Need Ratio", y = "Calories Burned") +
  theme_minimal()

plot22 <- ggplot(fitness, aes(x = factor(Age_group), y = Calories_Burned, fill = factor(Age_group))) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(aes(color = factor(Age_group)), width = 0.2, alpha = 0.5, size = 2) +
  scale_fill_brewer(palette = "Set1") +
  scale_color_brewer(palette = "Set1") +
  labs(title = "Calories Burned by Age Group", x = "Age Group", y = "Calories Burned") +
  theme_minimal()

plot23 <- ggplot(fitness, aes(x = BMI_CAT, y = Calories_Burned, fill = BMI_CAT)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(aes(color = BMI_CAT), width = 0.2, alpha = 0.5, size = 2) +
  scale_fill_brewer(palette = "Set3") +
  scale_color_brewer(palette = "Set3") +
  labs(title = "Calories Burned by BMI Category", x = "BMI Category", y = "Calories Burned") +
  theme_minimal()

# Arrange plots 21 to 24 in a single plot
grid.arrange(plot21, plot22, plot23, ncol = 3)
############################################################################################
str(fitness)
# Load necessary library
library(ggplot2)
library(reshape2)
library(corrplot)


# Use model.matrix to one-hot encode the categorical variables
data_encoded <- model.matrix(~ Gender + Workout_Type + BMI_CAT + Age_group - 1, data = fitness)

# Check and extract only numeric columns
numeric_data <- fitness[, sapply(fitness, function(x) is.numeric(x))]

# Combine the encoded categorical variables with the numeric data
full_data <- cbind(numeric_data, data_encoded)

# Calculate the correlation matrix with Pearson correlation
cor_matrix_full <- cor(full_data, use = "complete.obs", method = "pearson")

# Display the correlation matrix
print(cor_matrix_full)

calories_corr <- cor_matrix_full[,8]
print(calories_corr)

# Convert to data frame for a clean table
calories_corr_df <- data.frame(
  Variable = names(calories_corr),
  Correlation = as.numeric(calories_corr)
)

# Print as a table using knitr
library(knitr)
kable(calories_corr_df, col.names = c("Variable", "Correlation with Calories_Burned"))

###############################
#Dimension reduction:


#for regression:
# Assuming the original dataset is named 'fitness_data'

# Select the variables with strong or moderate correlation with Calories Burned
selected_vars <- c("Session_Duration..hours.", "workout_intensity_score", "Experience_Level", 
                   "calories_per_kg", "Workout_Frequency..days.week.", "Water_Intake..liters.", 
                   "Avg_BPM", "heart_intensity_ratio", "heart_rate_reserve", "hydration_need_ratio", 
                   "Fat_Percentage","Calories_Burned")

# Subset the original dataset to include only the selected variables
fitness_regression <- fitness[, selected_vars]

# Check the new dataset
head(fitness_regression)

# View the new dataset to check exclusions
str(fitness_regression)

# View the new dataset to check exclusions
head(fitness_regression)


################################

# Data Partitioning - training partition (70%), validation partition (15%), 
# and testing partition (15%)
set.seed(1234) 

# Create Training Set (70% of data)
library(caret)
unique(fitness_regression$Calories_Burned)

# Split Data into Training (70%) and Remaining (30%)
train_index <- createDataPartition(fitness_regression$Calories_Burned, p = 0.7, list = FALSE)
train_Fitness <- fitness_regression[train_index, ]
remaining_Fitness <- fitness_regression[-train_index, ]

# Split Remaining Data into Validation (50% of Remaining = 15% of Total) and Test (50% of Remaining = 15% of Total)
validation_index <- createDataPartition(remaining_Fitness$Calories_Burned, p = 0.5, list = FALSE)
validation_Fitness <- remaining_Fitness[validation_index, ]
test_Fitness <- remaining_Fitness[-validation_index, ]

# Getting dimensions of train dataset
dim(train_Fitness)

# Getting dimensions of validation dataset
dim(validation_Fitness)

# Getting dimensions of test dataset
dim(test_Fitness)
str(fitness_regression)
################################
#for clustering:
# Create a new dataset excluding the specified variables
fitness_clustering <- fitness[, !names(fitness) %in% 
                                     c("Resting_BPM", "Heart_Rate_Reserve", "BMI_CAT", "Age_group")]

# View the new dataset to check if the exclusions were successful
str(fitness_clustering)




# Load necessary libraries
library(dplyr)
library(caret)

# Convert categorical variables to factors 
fitness_clustering$Gender <- factor(fitness_clustering$Gender)
fitness_clustering$Workout_Type <- factor(fitness_clustering$Workout_Type)
fitness_clustering$Experience_Level<-factor(fitness_clustering$Experience_Level)

# Convert categorical variables to numeric using one-hot encoding
fitness_encoded <- dummyVars(Calories_Burned ~ Gender + Workout_Type + Experience_Level, data = fitness_clustering)
fitness_transformed <- predict(fitness_encoded, newdata = fitness_clustering)
fitness_transformed <- data.frame(fitness_transformed)
str(fitness_transformed)

fitness_clustering <- as.data.frame(fitness_clustering)
fitness_clustering <- cbind(fitness_clustering %>% select_if(is.numeric), fitness_transformed)

str(fitness_clustering)
###############################################################################################################
#################################################################################
#k-means clustering 

library(factoextra)
library(tidyverse)
library(cluster)
library(ggplot2)
library(ggrepel)
library(ggforce)
library(plotly)
library(dendextend)

# Normalize all variables using Z-score standardization
fitness_normalized <- scale(fitness_clustering)
# Find optimal number of clusters using WSS (Elbow Method)
fviz_nbclust(fitness_normalized, kmeans, method = "wss")

# K-Means Clustering
set.seed(123)
kmeans_result <- kmeans(fitness_normalized, centers = 3, nstart = 25)

# Compute Silhouette Scores for kmeans clustering 
dis <- dist(fitness_normalized)
sil <- silhouette(kmeans_result$cluster, dis)
summary(sil)

# Silhouette Analysis Plot
fviz_silhouette(sil, label=TRUE, palette = "jco", ggtheme = theme_classic())
########################################################
# Hierarchical Clustering
dist_matrix <- dist(fitness_normalized, method = "euclidean")
hclust_result <- hclust(dist_matrix, method = "ward.D2")

dend <- as.dendrogram(hclust_result) %>%
  color_branches(k = 3, col = c("#E74C3C", "#3498DB", "#2ECC71"))

plot(dend, main = "Hierarchical Clustering Dendrogram", sub = "", xlab = "")
abline(h = max(hclust_result$height)/1.5, col = "red", lwd = 2)

# Cut the dendrogram into 3 clusters
hclust_clusters <- cutree(hclust_result, k = 3)

# Compute silhouette values for Hierarchical clustering
sil_hclust <- silhouette(hclust_clusters, dis) 
summary(sil_hclust)  # Shows silhouette values for each cluster

# Plot silhouette analysis for Hierarchical clustering
factoextra::fviz_silhouette(sil_hclust, label=TRUE, palette = "jco", ggtheme = theme_classic())

##################################################################################################################################3
#install.packages("Metrics")
#regression model
######################
# Load necessary libraries
library(tidyverse)
library(rpart)
library(rpart.plot)
library(Metrics)  

# Fit the  regression model
model <- lm(Calories_Burned ~ ., data = train_Fitness)

summary(model)
# Predict using the  regression model
lr_predictions <- predict(model, newdata = validation_Fitness)


# Calculate evaluation metrics for the Linear Regression model
lr_mae <- mae(validation_Fitness$Calories_Burned, lr_predictions)
lr_mse <- mse(validation_Fitness$Calories_Burned, lr_predictions)
lr_rmse <- rmse(validation_Fitness$Calories_Burned, lr_predictions)
lr_r2 <- 1 - sum((validation_Fitness$Calories_Burned - lr_predictions)^2) / sum((test_Fitness$Calories_Burned - mean(test_Fitness$Calories_Burned))^2)


# Display the metrics
cat(" Regression Model Evaluation Metrics:\n")
cat("MAE: ", lr_mae, "\n")
cat("MSE: ", lr_mse, "\n")
cat("RMSE: ", lr_rmse, "\n")
cat("R-squared: ", lr_r2, "\n\n")
##############################################
###################
#random forest 
library(randomForest)
library(caret)
library(Metrics)
# Train Random Forest model
rf_model <- randomForest(Calories_Burned ~ ., data = train_Fitness, ntree = 500, importance = TRUE)

summary(rf_model)

# Variable importance
importance(rf_model)

rf_predictions <- predict(rf_model, newdata = validation_Fitness)

# Make predictions using the Random Forest model
rf_predictions <- predict(rf_model, validation_Fitness)

# Calculate evaluation metrics
rf_mae <- MAE(validation_Fitness$Calories_Burned, rf_predictions)
rf_mse <- mse(validation_Fitness$Calories_Burned, rf_predictions)
rf_rmse <- RMSE(validation_Fitness$Calories_Burned, rf_predictions)
rf_r2 <- 1 - sum((validation_Fitness$Calories_Burned - rf_predictions)^2) / 
  sum((test_Fitness$Calories_Burned - mean(test_Fitness$Calories_Burned))^2)

# Display the metrics
cat("Random Forest Model Evaluation Metrics:\n")
cat("MAE: ", rf_mae, "\n")
cat("MSE: ", rf_mse, "\n")
cat("RMSE: ", rf_rmse, "\n")
cat("R-squared: ", rf_r2, "\n\n")

####################################################################################3
#improvement for regression:
# Load necessary library
library(MASS)

# Null model (no predictors)
null_model <- lm(Calories_Burned ~ 1, data = train_Fitness)

# Full model with all predictors (replace 'model' with the correct full model)
model <- lm(Calories_Burned ~ ., data = train_Fitness)

# Perform Forward Selection
model_forward_mlr <- stepAIC(null_model, scope = list(lower = null_model, upper = model), direction = "forward")

# Display the summary of the forward selection model
summary(model_forward_mlr)

# Summary of the model
summary(model_forward_mlr)

# Predict using the regression model with test data
lr_predictions <- predict(model, newdata = test_Fitness)

# Calculate evaluation metrics for the Linear Regression model
lr_mae <- mae(test_Fitness$Calories_Burned, lr_predictions)
lr_mse <- mse(test_Fitness$Calories_Burned, lr_predictions)
lr_rmse <- rmse(test_Fitness$Calories_Burned, lr_predictions)
lr_r2 <- 1 - sum((test_Fitness$Calories_Burned - lr_predictions)^2) / sum((test_Fitness$Calories_Burned - mean(test_Fitness$Calories_Burned))^2)

# Display the metrics
cat("Regression Model Evaluation Metrics:\n")
cat("MAE: ", lr_mae, "\n")
cat("MSE: ", lr_mse, "\n")
cat("RMSE: ", lr_rmse, "\n")
cat("R-squared: ", lr_r2, "\n\n")



###################################################
#improvement for clustering
library(cluster)
library(factoextra)
library(cluster)
library(ggplot2)

# Create an empty vector to store the average silhouette scores for each k
avg_silhouette_scores_hclust <- c()

# Perform hierarchical clustering
dist_matrix <- dist(fitness_normalized, method = "manhattan")
hclust_result <- hclust(dist_matrix, method = "ward.D2")

# Loop through different k values (number of clusters)
for(k in 2:10) {
  # Cut the dendrogram into k clusters
  hclust_clusters <- cutree(hclust_result, k = k)
  
  # Compute silhouette scores for hierarchical clustering
  sil_hclust <- silhouette(hclust_clusters, dist_matrix)
  
  # Calculate the average silhouette score for this k
  avg_sil_score_hclust <- mean(sil_hclust[, 3])
  
  # Append the result to the vector
  avg_silhouette_scores_hclust <- c(avg_silhouette_scores_hclust, avg_sil_score_hclust)
}

# Create a data frame to store k values and corresponding silhouette scores
silhouette_data_hclust <- data.frame(Clusters = 2:10, Avg_Silhouette_Score = avg_silhouette_scores_hclust)

# Plot the average silhouette score against the number of clusters
ggplot(silhouette_data_hclust, aes(x = Clusters, y = Avg_Silhouette_Score)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "red", size = 3) +
  labs(title = "Average Silhouette Score vs. Number of Clusters (Hierarchical Clustering)", 
       x = "Number of Clusters", 
       y = "Average Silhouette Score") +
  theme_minimal()

print(silhouette_data_hclust)
##########################################################################################################################################
library(cluster)
library(factoextra)
library(dendextend)

# Compute distance matrix
dist_matrix <- dist(fitness_normalized, method = "manhattan")

# List of linkage methods
linkage_methods <- c("single", "complete", "average", "ward.D2")

# Set up plotting layout
par(mfrow = c(2, 2))  # 2x2 layout for multiple plots

# Loop through each linkage method
for (method in linkage_methods) {
  
  # Perform hierarchical clustering
  hclust_result <- hclust(dist_matrix, method = method)
  
  # Cut the tree to form 3 clusters
  clusters <- cutree(hclust_result, k = 3)
  
  # Compute silhouette scores
  sil <- silhouette(clusters, dist_matrix)
  
  # Plot silhouette analysis
  plot(sil, col = 2:4, border = NA, main = paste("Silhouette Plot -", method, "Linkage"))
}

# Reset plotting layout
par(mfrow = c(1, 1))  # Reset to default layout

#####################

# Create a data frame to store the cluster assignments
clustered_data <- data.frame(fitness_normalized, Cluster = clusters)

# Calculate centroids (mean of features within each cluster)
centroids <- aggregate(fitness_normalized, by = list(Cluster = clusters), FUN = mean)

# Reshape the centroids data to long format for plotting
centroids_long <- centroids %>%
  gather(key = "Feature", value = "Center_Value", -Cluster) %>%
  arrange(Cluster, Feature)

# Plot the cluster centers (centroids) using plot_ly
plot_ly(centroids_long, x = ~Feature, y = ~Center_Value, type = 'bar', 
        color = ~factor(Cluster), colors = c("#E74C3C", "#3498DB", "#2ECC71")) %>%
  layout(title = "Cluster Centers of Features (Hierarchical Clustering)", 
         xaxis = list(title = "Feature", tickangle = -45), 
         yaxis = list(title = "Cluster Centers"), 
         barmode = "group")



